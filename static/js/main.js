// üéØ Multi-Model T√ºrk√ße Semantik Arama Sistemi - Ana JavaScript

let currentSearchType = 'sentences';
let availableModels = {};
let systemStats = {};
let isDropdownOpen = false;

// Her arama tipi i√ßin son aramayƒ± hafƒ±zada tut
let searchHistory = {
    sentences: { query: '', results: null },
    words: { query: '', results: null },
    relationships: { query: '', results: null }
};

// Sayfa y√ºklendiƒüinde sistem bilgilerini al
document.addEventListener('DOMContentLoaded', function() {
    loadSystemInfo();
    
    // Enter tu≈üu ile arama
    document.getElementById('searchQuery').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            performSearch();
        }
    });

    // Dropdown dƒ±≈üƒ±na tƒ±klandƒ±ƒüƒ±nda kapat
    document.addEventListener('click', function(e) {
        const dropdown = document.getElementById('modelDropdown');
        if (!dropdown.contains(e.target)) {
            closeDropdown();
        }
    });
});

// Dropdown'u a√ß/kapat
function toggleModelDropdown() {
    const dropdownButton = document.getElementById('dropdownButton');
    const dropdownMenu = document.getElementById('dropdownMenu');
    
    if (isDropdownOpen) {
        closeDropdown();
    } else {
        openDropdown();
    }
}

function openDropdown() {
    const dropdownButton = document.getElementById('dropdownButton');
    const dropdownMenu = document.getElementById('dropdownMenu');
    
    dropdownButton.classList.add('active');
    dropdownMenu.classList.add('show');
    isDropdownOpen = true;
}

function closeDropdown() {
    const dropdownButton = document.getElementById('dropdownButton');
    const dropdownMenu = document.getElementById('dropdownMenu');
    
    dropdownButton.classList.remove('active');
    dropdownMenu.classList.remove('show');
    isDropdownOpen = false;
}

// Sistem bilgilerini ve modelleri y√ºkle
function loadSystemInfo() {
    fetch('/stats')
        .then(response => response.json())
        .then(data => {
            systemStats = data;
            updateStatsDisplay(data);
            loadModelSelector(data);
        })
        .catch(error => {
            console.error('Sistem bilgisi y√ºkleme hatasƒ±:', error);
            document.getElementById('stats').innerHTML = '‚ùå Sistem bilgisi y√ºklenemedi';
            document.getElementById('modelOptions').innerHTML = '<div class="model-error">‚ùå Modeller y√ºklenemedi</div>';
        });
}

// ƒ∞statistikleri g√ºncelle
function updateStatsDisplay(data) {
    const statsDiv = document.getElementById('stats');
    if (data.error) {
        statsDiv.innerHTML = `‚ùå ${data.error}`;
        return;
    }
    
    statsDiv.innerHTML = `
        üìö <strong>${data.sentences_count}</strong> c√ºmle |
        üî§ <strong>${data.words_count}</strong> kelime |
        üîó <strong>${data.relationships_count}</strong> ili≈üki |
        ü§ñ <strong>${data.models_loaded}</strong> model y√ºkl√º
    `;
}

// Model se√ßici dropdown olu≈ütur
function loadModelSelector(data) {
    const modelOptions = document.getElementById('modelOptions');
    
    if (data.error || !data.available_models || data.available_models.length === 0) {
        modelOptions.innerHTML = '<div class="model-error">‚ùå Hi√ßbir model y√ºklenmemi≈ü</div>';
        updateDropdownText();
        return;
    }
    
    availableModels = data.supported_models || {};
    const availableModelIds = data.available_models || [];
    
    let modelsHTML = '';
    
    availableModelIds.forEach((modelId, index) => {
        const modelName = availableModels[modelId] || modelId;
        const isChecked = index === 0; // ƒ∞lk model varsayƒ±lan olarak se√ßili
        
        // Model detaylarƒ±nƒ± al
        const modelDetails = data.model_details && data.model_details[modelId];
        const wordCount = modelDetails ? modelDetails.words : 0;
        const sentenceCount = modelDetails ? modelDetails.sentences : 0;
        
        modelsHTML += `
            <div class="model-option ${isChecked ? 'selected' : ''}" onclick="toggleModelSelection('${modelId}')">
                <label class="model-label">
                    <input type="checkbox" 
                           name="model" 
                           value="${modelId}" 
                           ${isChecked ? 'checked' : ''}
                           style="display: none;">
                    <div class="model-info-card">
                        <div class="model-check">${isChecked ? '‚úì' : ''}</div>
                        <div class="model-details">
                            <div class="model-name">${getModelDisplayName(modelId)}</div>
                            <div class="model-path">${modelName}</div>
                            <div class="model-stats">üìö ${sentenceCount} c√ºmle ‚Ä¢ üî§ ${wordCount} kelime</div>
                        </div>
                    </div>
                </label>
            </div>
        `;
    });
    
    modelOptions.innerHTML = modelsHTML;
    
    // Dropdown text'ini g√ºncelle
    updateDropdownText();
    updateModelSelection();
}

// Model se√ßimini toggle et
function toggleModelSelection(modelId) {
    const modelOption = document.querySelector(`.model-option[onclick="toggleModelSelection('${modelId}')"]`);
    const checkbox = modelOption.querySelector('input[type="checkbox"]');
    const checkIcon = modelOption.querySelector('.model-check');
    
    // Toggle selection
    const isSelected = modelOption.classList.contains('selected');
    
    if (isSelected) {
        modelOption.classList.remove('selected');
        checkbox.checked = false;
        checkIcon.textContent = '';
    } else {
        modelOption.classList.add('selected');
        checkbox.checked = true;
        checkIcon.textContent = '‚úì';
    }
    
    updateDropdownText();
    updateModelSelection();
}

// Dropdown text'ini g√ºncelle
function updateDropdownText() {
    const selectedModels = getSelectedModels();
    const dropdownText = document.getElementById('dropdownText');
    
    if (selectedModels.length === 0) {
        dropdownText.textContent = 'Modelleri Se√ßin';
    } else if (selectedModels.length === 1) {
        dropdownText.textContent = getModelDisplayName(selectedModels[0]);
    } else {
        dropdownText.textContent = `${selectedModels.length} Model Se√ßili`;
    }
}

// Model display isimlerini d√ºzenle
function getModelDisplayName(modelId) {
    const displayNames = {
        'dbmdz_bert': 'üáπüá∑ BERT Turkish',
        'turkcell_roberta': 'üáπüá∑ Turkcell RoBERTa',
        'multilingual_mpnet': 'üåç Multilingual MPNet'
    };
    return displayNames[modelId] || modelId.toUpperCase();
}

// Model se√ßimi deƒüi≈ütiƒüinde
function updateModelSelection() {
    const selectedModels = getSelectedModels();
    const searchBtn = document.querySelector('.search-btn');
    const selectionInfo = document.getElementById('selectionInfo');
    
    if (selectedModels.length === 0) {
        searchBtn.disabled = true;
        searchBtn.style.opacity = '0.5';
        searchBtn.title = 'En az bir model se√ßmelisiniz';
    } else {
        searchBtn.disabled = false;
        searchBtn.style.opacity = '1';
        searchBtn.title = `${selectedModels.length} model ile arama yap`;
    }
    
    // Se√ßili model sayƒ±sƒ±nƒ± g√∂ster
    if (selectionInfo) {
        if (selectedModels.length === 0) {
            selectionInfo.innerHTML = '<small>‚ö†Ô∏è <strong>Hi√ßbir model se√ßilmemi≈ü!</strong> En az bir model se√ßin.</small>';
        } else if (selectedModels.length === 1) {
            selectionInfo.innerHTML = `<small>‚úÖ <strong>1 model se√ßili:</strong> ${getModelDisplayName(selectedModels[0])}</small>`;
        } else {
            selectionInfo.innerHTML = `<small>‚úÖ <strong>${selectedModels.length} model se√ßili</strong> - Kar≈üƒ±la≈ütƒ±rmalƒ± sonu√ßlar g√∂sterilecek</small>`;
        }
    }
}

// Se√ßili modelleri al
function getSelectedModels() {
    const checkboxes = document.querySelectorAll('#modelOptions input[name="model"]:checked');
    return Array.from(checkboxes).map(cb => cb.value);
}

// Arama tipi deƒüi≈ütirme
document.querySelectorAll('.toggle-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        // Aktif buton stilini deƒüi≈ütir
        document.querySelectorAll('.toggle-btn').forEach(b => b.classList.remove('active'));
        this.classList.add('active');
        
        // Arama tipini g√ºncelle
        currentSearchType = this.getAttribute('data-type');
        
        // Placeholder'ƒ± g√ºncelle
        const input = document.getElementById('searchQuery');
        if (currentSearchType === 'sentences') {
            input.placeholder = 'C√ºmleler i√ßinde aramak istediƒüiniz kelime veya ifadeyi yazƒ±n...';
        } else if (currentSearchType === 'words') {
            input.placeholder = 'Kelimeler i√ßinde aramak istediƒüiniz kelimeyi yazƒ±n...';
        } else {
            input.placeholder = 'ƒ∞li≈ükilerini √∂ƒürenmek istediƒüiniz kelimeyi yazƒ±n...';
        }
        
        // √ñrnek aramalarƒ± g√ºncelle
        document.getElementById('sentenceExamples').style.display = currentSearchType === 'sentences' ? 'block' : 'none';
        document.getElementById('wordExamples').style.display = currentSearchType === 'words' ? 'block' : 'none';
        document.getElementById('relationshipExamples').style.display = currentSearchType === 'relationships' ? 'block' : 'none';
        
        // Bu arama tipi i√ßin kaydedilmi≈ü arama var mƒ± kontrol et
        const savedSearch = searchHistory[currentSearchType];
        if (savedSearch && savedSearch.query && savedSearch.results) {
            // Kaydedilmi≈ü aramayƒ± geri y√ºkle
            input.value = savedSearch.query;
            restoreSearchResults(savedSearch.results, savedSearch.query);
        } else {
            // Sonu√ßlarƒ± temizle
            input.value = '';
            document.getElementById('results').innerHTML = '';
        }
    });
});

// √ñrnek sorgu se√ß
function setQuery(query) {
    // √ñnceki aramayƒ± temizle √ß√ºnk√º yeni bir arama ba≈ülatƒ±lƒ±yor
    searchHistory[currentSearchType] = { query: '', results: null };
    document.getElementById('searchQuery').value = query;
    performSearch();
}

// Ana arama fonksiyonu
function performSearch() {
    const query = document.getElementById('searchQuery').value.trim();
    
    if (!query) {
        alert('L√ºtfen bir arama terimi girin!');
        return;
    }

    // Se√ßili modelleri al
    const selectedModels = getSelectedModels();
    if (selectedModels.length === 0) {
        alert('L√ºtfen en az bir model se√ßin!');
        return;
    }

    // Loading g√∂ster
    const resultsDiv = document.getElementById('results');
    resultsDiv.innerHTML = `
        <div class="loading">
            <div class="loading-spinner"></div>
            <div>üîç "${query}" aramasƒ± yapƒ±lƒ±yor...</div>
            <div><small>${selectedModels.length} model ile kar≈üƒ±la≈ütƒ±rmalƒ± arama</small></div>
        </div>
    `;

    // API √ßaƒürƒ±sƒ±
    if (currentSearchType === 'relationships') {
        // ƒ∞li≈ükiler i√ßin ayrƒ± endpoint (tek model yeterli)
        fetch(`/relationships/${encodeURIComponent(query)}`)
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                resultsDiv.innerHTML = `
                    <div class="no-results">
                        <div class="no-results-icon">‚ùå</div>
                        <h3>Hata Olu≈ütu</h3>
                        <p>${data.error}</p>
                    </div>
                `;
            } else {
                displayRelationships(data);
                // Ba≈üarƒ±lƒ± aramayƒ± kaydet
                searchHistory[currentSearchType] = {
                    query: query,
                    results: data
                };
            }
        })
        .catch(error => {
            console.error('ƒ∞li≈üki arama hatasƒ±:', error);
            resultsDiv.innerHTML = `
                <div class="no-results">
                    <div class="no-results-icon">‚ö†Ô∏è</div>
                    <h3>Baƒülantƒ± Hatasƒ±</h3>
                    <p>ƒ∞li≈üki bilgileri alƒ±nƒ±rken bir hata olu≈ütu.</p>
                </div>
            `;
        });
    } else {
        // Multi-model arama
        fetch('/search', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                query: query,
                type: currentSearchType,
                models: selectedModels
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                resultsDiv.innerHTML = `
                    <div class="no-results">
                        <div class="no-results-icon">‚ùå</div>
                        <h3>Hata Olu≈ütu</h3>
                        <p>${data.error}</p>
                    </div>
                `;
            } else {
                displayMultiModelResults(data);
                // Ba≈üarƒ±lƒ± aramayƒ± kaydet
                searchHistory[currentSearchType] = {
                    query: query,
                    results: data
                };
            }
        })
        .catch(error => {
            console.error('Arama hatasƒ±:', error);
            resultsDiv.innerHTML = `
                <div class="no-results">
                    <div class="no-results-icon">‚ö†Ô∏è</div>
                    <h3>Baƒülantƒ± Hatasƒ±</h3>
                    <p>Arama yapƒ±lƒ±rken bir hata olu≈ütu.</p>
                </div>
            `;
        });
    }
}

// Multi-model sonu√ßlarƒ± g√∂ster
function displayMultiModelResults(data) {
    const resultsDiv = document.getElementById('results');
    const searchResults = data.search_results || {};
    const modelsUsed = data.models_used || [];
    
    if (modelsUsed.length === 0) {
        resultsDiv.innerHTML = `
            <div class="no-results">
                <div class="no-results-icon">üîç</div>
                <h3>Sonu√ß Bulunamadƒ±</h3>
                <p>"${data.query}" i√ßin hi√ßbir modelde sonu√ß bulunamadƒ±.</p>
            </div>
        `;
        return;
    }

    // Sonu√ß ba≈ülƒ±ƒüƒ±
    let resultsHTML = `
        <div class="search-summary">
            <h3>üîç "${data.query}" Arama Sonu√ßlarƒ±</h3>
            <p>${modelsUsed.length} model ile ${data.type === 'sentences' ? 'c√ºmle' : 'kelime'} aramasƒ±</p>
        </div>
        <div class="model-results-grid">
    `;

    // Her model i√ßin sonu√ßlarƒ± g√∂ster
    modelsUsed.forEach(modelId => {
        const modelData = searchResults[modelId];
        if (!modelData) return;

        const modelName = getModelDisplayName(modelId);
        const results = modelData.results || [];
        
        resultsHTML += `
            <div class="model-results-column">
                <div class="model-header">
                    <h4>${modelName}</h4>
                    <div class="model-details">
                        <small>${modelData.model_name}</small>
                        <span class="result-count">${results.length} sonu√ß</span>
                    </div>
                </div>
                <div class="model-results-list">
        `;

        if (results.length === 0) {
            resultsHTML += `
                <div class="no-results-in-model">
                    <p>Bu modelde sonu√ß bulunamadƒ±</p>
                </div>
            `;
        } else {
            results.forEach((result, index) => {
                if (data.type === 'sentences') {
                    resultsHTML += createSentenceResultHTML(result, index);
                } else {
                    resultsHTML += createWordResultHTML(result, index);
                }
            });
        }

        resultsHTML += `
                </div>
            </div>
        `;
    });

    resultsHTML += `</div>`;
    resultsDiv.innerHTML = resultsHTML;
}

// C√ºmle sonucu HTML'i olu≈ütur
function createSentenceResultHTML(result, index) {
    const similarityColor = getSimilarityColor(result.similarity_percent);
    
    return `
        <div class="result-item sentence-result">
            <div class="result-header">
                <span class="result-rank">#${result.rank}</span>
                <span class="similarity-badge" style="background-color: ${similarityColor}">
                    ${result.similarity_percent}%
                </span>
            </div>
            <div class="result-content">
                <p class="sentence-text">"${result.sentence}"</p>
            </div>
        </div>
    `;
}

// Kelime sonucu HTML'i olu≈ütur
function createWordResultHTML(result, index) {
    const similarityColor = getSimilarityColor(result.similarity_percent);
    
    let relationshipsHTML = '';
    if (result.relationships && Object.keys(result.relationships).length > 0) {
        relationshipsHTML = '<div class="word-relationships">';
        for (const [relType, words] of Object.entries(result.relationships)) {
            if (words && words.length > 0) {
                relationshipsHTML += `
                    <div class="relation-group">
                        <strong>${relType}:</strong> ${words.slice(0, 3).join(', ')}${words.length > 3 ? '...' : ''}
                    </div>
                `;
            }
        }
        relationshipsHTML += '</div>';
    }
    
    return `
        <div class="result-item word-result">
            <div class="result-header">
                <span class="result-rank">#${result.rank}</span>
                <span class="similarity-badge" style="background-color: ${similarityColor}">
                    ${result.similarity_percent}%
                </span>
            </div>
            <div class="result-content">
                <div class="word-text">${result.word}</div>
                ${relationshipsHTML}
            </div>
        </div>
    `;
}

// Benzerlik y√ºzdesine g√∂re renk
function getSimilarityColor(percentage) {
    if (percentage >= 80) return '#28a745';
    if (percentage >= 60) return '#ffc107';
    if (percentage >= 40) return '#fd7e14';
    return '#dc3545';
}

// ƒ∞li≈üki sonu√ßlarƒ±nƒ± g√∂ster (eski fonksiyon korundu)
function displayRelationships(data) {
    const resultsDiv = document.getElementById('results');
    
    if (data.error) {
        resultsDiv.innerHTML = `
            <div class="no-results">
                <div class="no-results-icon">‚ùå</div>
                <h3>ƒ∞li≈üki Bulunamadƒ±</h3>
                <p>${data.error}</p>
            </div>
        `;
        return;
    }

    const relationships = data.relationships || {};
    let resultsHTML = `
        <div class="relationships-container">
            <h3>üîó "${data.word}" Kelimesi ƒ∞li≈ükileri</h3>
            <div class="relationships-grid">
    `;

    for (const [relationType, words] of Object.entries(relationships)) {
        if (words && words.length > 0) {
            resultsHTML += `
                <div class="relationship-group">
                    <h4 class="relationship-type">${relationType}</h4>
                    <div class="relationship-words">
            `;
            
            words.forEach(word => {
                resultsHTML += `
                    <span class="relationship-word" onclick="searchRelatedWord('${word}')">
                        ${word}
                    </span>
                `;
            });
            
            resultsHTML += `
                    </div>
                </div>
            `;
        }
    }

    resultsHTML += `
            </div>
        </div>
    `;

    resultsDiv.innerHTML = resultsHTML;
}

// ƒ∞li≈ükili kelimeyi ara
function searchRelatedWord(word) {
    document.getElementById('searchQuery').value = word;
    // Kelime aramasƒ±na ge√ß
    document.querySelector('[data-type="words"]').click();
    performSearch();
}

// Sonu√ßlarƒ± geri y√ºkle (arama tipi deƒüi≈ütirildiƒüinde)
function restoreSearchResults(data, query) {
    if (currentSearchType === 'relationships') {
        displayRelationships(data);
    } else {
        displayMultiModelResults(data);
    }
} 